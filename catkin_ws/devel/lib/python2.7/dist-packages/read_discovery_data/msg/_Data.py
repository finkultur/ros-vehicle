"""autogenerated by genpy from read_discovery_data/Data.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Data(genpy.Message):
  _md5sum = "51e3b053adbd1528bed97731c44edc0d"
  _type = "read_discovery_data/Data"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 gyro0
float64 gyro1
float64 gyro2
float64 accel0
float64 accel1
float64 accel2
float64 mag0
float64 mag1
float64 mag2

"""
  __slots__ = ['gyro0','gyro1','gyro2','accel0','accel1','accel2','mag0','mag1','mag2']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       gyro0,gyro1,gyro2,accel0,accel1,accel2,mag0,mag1,mag2

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Data, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.gyro0 is None:
        self.gyro0 = 0.
      if self.gyro1 is None:
        self.gyro1 = 0.
      if self.gyro2 is None:
        self.gyro2 = 0.
      if self.accel0 is None:
        self.accel0 = 0.
      if self.accel1 is None:
        self.accel1 = 0.
      if self.accel2 is None:
        self.accel2 = 0.
      if self.mag0 is None:
        self.mag0 = 0.
      if self.mag1 is None:
        self.mag1 = 0.
      if self.mag2 is None:
        self.mag2 = 0.
    else:
      self.gyro0 = 0.
      self.gyro1 = 0.
      self.gyro2 = 0.
      self.accel0 = 0.
      self.accel1 = 0.
      self.accel2 = 0.
      self.mag0 = 0.
      self.mag1 = 0.
      self.mag2 = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_9d.pack(_x.gyro0, _x.gyro1, _x.gyro2, _x.accel0, _x.accel1, _x.accel2, _x.mag0, _x.mag1, _x.mag2))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 72
      (_x.gyro0, _x.gyro1, _x.gyro2, _x.accel0, _x.accel1, _x.accel2, _x.mag0, _x.mag1, _x.mag2,) = _struct_9d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_9d.pack(_x.gyro0, _x.gyro1, _x.gyro2, _x.accel0, _x.accel1, _x.accel2, _x.mag0, _x.mag1, _x.mag2))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 72
      (_x.gyro0, _x.gyro1, _x.gyro2, _x.accel0, _x.accel1, _x.accel2, _x.mag0, _x.mag1, _x.mag2,) = _struct_9d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_9d = struct.Struct("<9d")
